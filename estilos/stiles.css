:root{
    --grisaseo: #464646;
    --violeta: #a905b6;
    --rojizo: #E53A3A;
    --blanco: #ffffff;
    --grisClaro: #DFE9F3;
} /*Definir mis variables para mas tarde usarlas usando root(Este se usa con cualquier valor que quiera reutilizar). 
Los que comienzan con : se les llama pseudoselectores*/

html{
    font-size: 62.5%;
    box-sizing: border-box; /*Soluciona todos los problemas que ocurrian con el box sizing*/
}
*, *:before, *:after {
    box-sizing: inherit;
} /*Soluciona todos los problemas que ocurrian con el box sizing*/

body{
    font-size: 16px; /* 1rem = 10px */
    font-family: 'Source Sans Pro', sans-serif; /* Aplica a todo el proyecto la fuente que yo elija*/
    color: var(--grisaseo);
    /*El color de fondo siempre va a ir en el body*/
    background-image: linear-gradient(to top, var(--grisClaro) 0%, var(--blanco) 100%); /*Un color gradiente se logra así. Dentro de los parentesis se coloca desde donde quiero
    que empiece el degradado hasta donde termina. En este caso es de abajo hacia arriba con to top. Luego se le pasa el color que va en
    la parte inferior y luego el de la superior y el porcentaje indica desde donde quiero que inicie con ese color*/
}

/*Para tener algo mas general en el codigo osea, que para todos los h1 o los p aplique algo en especial se puede
definir desde un principio y asi siempre se usara esa configaracion en todo lo que defina de aqui en adelante
EJ:
h1 {
    font-size: 3.8rem; 1rem = 10px
    color: var (--grisaseo);
}
h2 {
    font-size: 2.8rem; 
}
h3 {
    font-size: 1.8rem; 
}
h1,h2,h3 {
    text-align: center;
}
*/


h1.titnom{
    text-align: center; /*Centrar texto*/
    font-size: 3.8rem; /* 1rem = 10px */
    color: var(--grisaseo);
}

h1.titnom span {
    font-size: 2rem;/*Hacer tamaño de fuente mas pequeño*/
}

/*Creación de una clase contenedora de todo el proyecto para que quede centrado*/
.contenedor{
    max-width: 120rem; /*Toma 120 como max, sino, toma el 100% ya que los div por defecto tienen eso*/
    /*
    margin-top: 0rem; (margen hacia arriba, cuanto estará separado del elemento anterior a este)
    margin-right: auto; (margen a la derecha)
    margin-bottom: 0rem; (margen hacia abajo)
    margin-left: auto; (magen a la izquierda)
    margin nos dice en que posición se va a colocar cada elemento y derecha e izquierda tiene auto para
    que su posición se definan automaticamente, esto hace que quede centrado
    
    margin: 0rem auto 0rem auto; Esto hace lo mismo de arriba
    Si hay dos valores que son igual se puede simplificar más
    */
    margin: 0rem auto; /*Css dice que el primero es para arriba y abajo y el segundo izquierda y derecha
    por esta razon solo colocamos un valor que es 0rem. En otras palabras toma los 4 valores*/

}

.botton{ /*Esta clase me sirve para los demas botones que quiera usar en la pagina y que sean iguales*/
    background-color: var(--violeta);
    color: var(--blanco);
    padding: 1rem 3rem;
    margin-top: 3rem;
    font-size: 2rem;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: bold;
    border-radius: .5rem;
    /*Esto aplica para celulares*/
    width: 90%;
    text-align: center;
}

@media (min-width: 768px) { 
    .botton{
        width: auto; /*Con esto se resetea*/
    }
}

.sombra { /*Se crea esta clase para poder pegar el codigo y dar sombra a la caja contenedora que tenemos en la mitad de la página*/
    -webkit-box-shadow: 1px 3px 5px 0px rgba(99,98,99,0.94);
    -moz-box-shadow: 1px 3px 5px 0px rgba(99,98,99,0.94);
    box-shadow: 1px 3px 5px 0px rgba(99,98,99,0.94);
    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}

.fondoNav{
    background-color: var(--violeta);
}

.navPrincipal{
    display: flex;/*Esto habilita flexbox*/
    flex-direction: column; /*Esto coloca la posicion en vertical para los dispositivos moviles*/
}

@media (min-width: 768px) { /*Este mq hereda lo que tiene navPrincipal. Con esto lo que quiero hacer es que se modifique a cierta resolucion de pantalla*/
    .navPrincipal{ /*min-width es el tamaño de pantalla en el que se va a ejecutar el código*/
        flex-direction: row;/*Esto devuelve a su posicion inicial*/
        justify-content: space-between; /*Espaciado entre las opciones*/
    }
}

.navPrincipal a{
    display: block; /*Esto hace que el texto tome todo el tamaño disponible. Esto lo hago para que en flexbox no ocurran errores de alineación*/
    text-align: center; /*Alinea el texto hacia el centro*/
    color: var(--blanco);
    text-decoration: none;/*Quitar la linea de los enlaces*/
    font-size: 2rem; /*tamaño de la fuente*/
    font-weight: bold; /*font-weight: 700; también nos sirve porque ese fue el tamaño que importamos*/
    padding: 1rem;/*Este valor lo toma en todas las direcciones
    Si lo quiero personalizado al alguno de los lados ahí si debo
    colocar los 4 valores*/
}

.navPrincipal a:hover{ /*se activa cuando paso el puntero por encima. Esta es una pseudoclase que se va a
    usar solo en este momento, por eso la creo aquí*/
    background-color: var(--grisaseo);
}

.hero{
    background-image: url(../img/professional-programmer-working-late-dark-office.jpg);/*Se usa .. para salir de una carpeta*/
    background-repeat: no-repeat; /*No repite una imagen*/
    background-size: cover; /*Para que la imagen tome todo el ancho disponible*/
    height: 45.5rem;
    padding: 2rem;
    position: relative;
    margin-bottom: 2rem; /*Para que se esté separado de el contenedor sombra que está debajo*/
}

.contenidoHero{
    position: absolute;
    background-color: rgba(0, 0, 0, .7); /*Este ultimo valor es para transparencia y va de 0 a 1 esta era la anterior sintaxis*/
    background-color: rgb(0 0 0 / 55%);/*Esta es la nueva sintaxis y la transparencia va de 0 a 100%*/
    bottom: 0rem;
    left: 0rem;
    top: 0rem;
    right: 0rem; /*Esto es para jugar con la transparencia de la imagen*/
    display: flex; /*siempre que quiera posicionar un elemento debo ponerle un display: flex al padre de ese elemento*/
    flex-direction: column; /*Coloca la direccion del elemento en vertical. Ya no puedo alinear horizontalmente con justifi content*/
    align-items: center; /*Se centra con aling items en vez de justifi content cuando usamos flex-direction: column*/
    justify-content: center; /*Este codigo centra verticalmente y horizontalmente siempre*/
}

.contenidoHero h2, .contenidoHero p{ /*Le voy a aplicar la misma regla a h2 y p asi que uso la coma*/
    color: var(--blanco);
}

@media (min-width: 768px) { /*Para hacerlo más responsivo en un dispositivo mas pequeño le creo este mq*/
    .servicios {
        display: grid; /*Activa CSS grid*/
        /*grid-template-columns: 33.3% 33.3% 33.3%; Se define el tamaño y cantidad que quiero que tenga cada columna. En este caso tomando el cuenta 
        que las tres columnas que necesito son mi 100% entonces con eso defino el tamaño de cada uno y debo repetirlo la cantidad de veces que quiera
        una columna*/
        grid-template-columns: repeat(3, 1fr);/* 1fr 1fr 1frCuando se repite no tengo necesidad de colocarlo las veces que lo haga, ya que puedo usar repeat. Esta es otra manera 
        mas facíl de hacer lo anterior es usando fracciones que lo que hace es que de un número entero me lo divide en la cantidad de fracciones que necesito*/
        /*grid-template-rows: 200px 800px;*/
        /*grid: 200px 800px / 300px 300px; Esta es la forma mas corta de hacer lo anterior. La primer parte son las rows y la segunda las columns*/
        column-gap: 1rem;
    }
    
}

.fondoServicio {

}
.fondoServicio h3{

}
.fondoServicio .iconoSvg{
    height: 15rem;
    width: 15rem;
    background-color: var(--violeta);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}
